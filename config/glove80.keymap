
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Symbol 3
#define LAYER_Game 4

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    behaviors {
  //
  // Miryoku home row mods and thumb layer keys
  // https://sunaku.github.io/home-row-mods.html
  // https://github.com/urob/zmk-config#timeless-homerow-mods
  //
  // TYPING_STREAK_TERM defines how long you need to wait (milliseconds)
  // after typing before you can use home row mods again.  It prevents
  // unintended activation of home row mods when you're actively typing.
  //
  #define TYPING_STREAK_TERM 200 // global-quick-tap-ms
  //
  // KEY_REPEATING_TERM defines how much time you have left (milliseconds)
  // after tapping a key to hold it again in order to make it auto-repeat.
  //
  #define KEY_REPEATING_TERM 300 // "tap then hold" for key auto-repeat
  //
  // HOMEY_TAPPING_TERM defines how long you need to hold (milliseconds)
  // home row mod keys in order to send their modifiers to the computer
  // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
  //
  // NOTE: the "balanced" flavor of ZMK hold-tap for home row mods already
  // provides instant modifier activation for keyboard-only usage, so this
  // setting is meant for combined keyboard/mouse usage such as mod-clicks.
  //
  #define HOMEY_TAPPING_TERM 280 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER

  //
  // THUMB_TAPPING_TERM defines how long you need to hold (milliseconds)
  // a thumb key to activate a layer.  Shorter holds are treated as taps.
  //
  #define THUMB_TAPPING_TERM 240
  //
  // Glove80 key positions index for positional hold-tap
  // https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
  // https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
  //
  // |------------------------|------------------------|
  // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
  // |                        |                        |
  // |  0  1  2  3  4         |          5  6  7  8  9 |
  // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
  // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
  // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
  // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
  // | 64 65 66 67 68         |         75 76 77 78 79 |
  // |                69 52   |   57 74                |
  // |                 70 53  |  56 73                 |
  // |                  71 54 | 55 72                  |
  // |------------------------|------------------------|
  //
  //
  #define LEFT_HAND_KEYS      \
        0  1  2  3  4         \
       10 11 12 13 14 15      \
       22 23 24 25 26 27      \
       34 35 36 37 38 39      \
       46 47 48 49 50 51      \
       64 65 66 67 68
  #define RIGHT_HAND_KEYS     \
                                         5  6  7  8  9 \
                                     16 17 18 19 20 21 \
                                     28 29 30 31 32 33 \
                                     40 41 42 43 44 45 \
                                     58 59 60 61 62 63 \
                                        75 76 77 78 79
  #define THUMB_KEYS          \
                      69 52       57 74                \
                       70 53     56 73                 \
                        71 54   55 72


  //
  // Home row mods
  //
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;    // <---[[right-hand keys]]
        };

        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;    // <---[[left-hand keys]]
        };

  homey_left_kp: home_row_mods_left_hand_kp {
      compatible = "zmk,behavior-hold-tap";
      label = "HOME_ROW_MODS_LEFT_HAND_KP";
      flavor = "balanced";
      hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
      // hold-trigger-on-release is only supported with version p19 which is currently being tested.
	  //hold-trigger-on-release; // wait for other home row mods
      tapping-term-ms = <HOMEY_TAPPING_TERM>;
      quick-tap-ms = <TYPING_STREAK_TERM>;
      global-quick-tap; // with typing streak
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
  };

  homey_right_kp: home_row_mods_right_hand_kp {
      compatible = "zmk,behavior-hold-tap";
      label = "HOME_ROW_MODS_RIGHT_HAND_KP";
      flavor = "balanced";
      hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
      // hold-trigger-on-release is only supported with version p19 which is currently being tested.
	  //hold-trigger-on-release; // wait for other home row mods
      tapping-term-ms = <HOMEY_TAPPING_TERM>;
      quick-tap-ms = <TYPING_STREAK_TERM>;
      global-quick-tap; // with typing streak
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
  };
  
    homey_left_mo: home_row_mods_left_hand_mo {
      compatible = "zmk,behavior-hold-tap";
      label = "HOME_ROW_MODS_LEFT_HAND_MO";
      flavor = "balanced";
      hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
      // hold-trigger-on-release is only supported with version p19 which is currently being tested.
	  //hold-trigger-on-release; // wait for other home row mods
      tapping-term-ms = <HOMEY_TAPPING_TERM>;
      quick-tap-ms = <TYPING_STREAK_TERM>;
      global-quick-tap; // with typing streak
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
  };

  homey_right_mo: home_row_mods_right_hand_mo {
      compatible = "zmk,behavior-hold-tap";
      label = "HOME_ROW_MODS_RIGHT_HAND_MO";
      flavor = "balanced";
      hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
      // hold-trigger-on-release is only supported with version p19 which is currently being tested.
	  //hold-trigger-on-release; // wait for other home row mods
      tapping-term-ms = <HOMEY_TAPPING_TERM>;
      quick-tap-ms = <TYPING_STREAK_TERM>;
      global-quick-tap; // with typing streak
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
  };

  thumb_key: thumb_key {
    compatible = "zmk,behavior-hold-tap";
    label = "THUMB_KEY";
    flavor = "hold-preferred";
    tapping-term-ms = <THUMB_TAPPING_TERM>;
    quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
    //global-quick-tap; // no typing streak
    #binding-cells = <2>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
  };

  rh_thumb_key: thumb_key {
    compatible = "zmk,behavior-hold-tap";
    label = "THUMB_KEY";
    flavor = "hold-preferred";
    tapping-term-ms = <THUMB_TAPPING_TERM>;
    quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
    //global-quick-tap; // no typing streak
    #binding-cells = <2>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
  };

  lh_thumb_key: thumb_key {
    compatible = "zmk,behavior-hold-tap";
    label = "THUMB_KEY";
    flavor = "hold-preferred";
    tapping-term-ms = <THUMB_TAPPING_TERM>;
    quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
    //global-quick-tap; // no typing streak
    #binding-cells = <2>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
  };

  //
  // Thumb cluster hold-tap keys for layers
  //
  thumb_layer: thumb_layer {
    compatible = "zmk,behavior-hold-tap";
    label = "LAYER_TAP_WITH_REPEAT";
    flavor = "balanced";
    tapping-term-ms = <THUMB_TAPPING_TERM>;
    quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
    //global-quick-tap; // no typing streak
    #binding-cells = <2>;
    bindings = <&mo>, <&kp>;
  };

  tab_or_cappy: tab_or_cappy {
      compatible = "zmk,behavior-mod-morph";
      label = "TAB_OR_CAPPY";
      #binding-cells = <0>;
      bindings = <&kp TAB>, <&caps_word>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  esc_or_f4: esc_or_f4 {
      compatible = "zmk,behavior-mod-morph";
      label = "ESC_OR_F4";
      #binding-cells = <0>;
      bindings = <&kp ESC>, <&kp F4>;
      mods = <(MOD_LALT)>;
      keep-mods = <(MOD_LALT)>;
  };

  //
  // CapsWord - ported from Pascal Getreuer's extension for QMK
  // https://zmk.dev/docs/behaviors/caps-word
  // https://getreuer.info/posts/keyboards/caps-word/index.html
  //
  behavior_caps_word {
      continue-list = <FSLH QUESTION BACKSPACE DELETE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
  };
/*
  pound: pound {
    label = "POUND";
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&macro_press &kp RALT>
      , <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N3>
      , <&macro_release &kp RALT>
      ;
  };

  one_or_exclaimation: one_or_exclaimation{
      compatible = "zmk,behavior-mod-morph";
      label = "ONE_OR_EXCLAIMATION";
      #binding-cells = <0>;
      bindings = <&kp KP_N1>, <&keypress_sticky_layer EXCL 5>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  slash_or_qmark: slash_or_qmark{
      compatible = "zmk,behavior-mod-morph";
      label = "SLASH_OR_QMARK";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&keypress_sticky_layer QMARK 5>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  sls: sticky_layer_slow {
    compatible = "zmk,behavior-sticky-key";
    label = "STICKY_LAYER_SLOW";
    #binding-cells = <1>;
    release-after-ms = <60000>;
    bindings = <&mo>;
    quick-release;
  };

  keypress_sticky_layer: keypress_sticky_layer {
    label = "KEYPRESS_STICKY_LAYER";
    compatible = "zmk,behavior-macro-two-param";
    #binding-cells = <2>;
    bindings
      = <&macro_param_1to1>
      , <&macro_tap &kp MACRO_PLACEHOLDER>
      , <&macro_param_2to1>
      , <&macro_tap &sls MACRO_PLACEHOLDER>
      ;
  };
  */
};
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1    &kp F2   &kp F3  &kp F4  &kp F5                                                                                                                                &kp F6     &kp F7     &kp F8    &kp F9    &kp F10
            &kp EQUAL    &kp N1   &kp N2  &kp N3  &kp N4  &kp N5                                                                                                             &kp N6     &kp N7     &kp N8     &kp N9    &kp N0     &tog 4
        &tab_or_cappy     &kp Q    &kp W   &kp E   &kp R   &kp T                                                                                                              &kp Y      &kp U      &kp I      &kp O     &kp P   &kp LBKT
           &esc_or_f4     &kp A    &kp S   &kp D   &kp F   &kp G                                                                                                              &kp H      &kp J      &kp K      &kp L  &kp SEMI    &kp SQT
            &kp LSHFT     &kp Z    &kp X   &kp C   &kp V   &kp B  &kp LCTRL               &kp LALT            &kp LGUI            &kp RGUI              &kp RALT  &kp RCTRL   &kp N      &kp M  &kp COMMA    &kp DOT  &kp FSLH  &kp RSHFT
 &magic LAYER_Magic 0  &kp HOME  &kp END   &none   &none          &kp SPACE  &thumb_layer 3 DELETE  &thumb_layer 1 F11  &thumb_layer 1 F12  &thumb_layer 3 ENTER   &kp BSPC          &kp PG_UP  &kp PG_DN  &kp MINUS     &none      &none
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
               &trans         &none           &none           &none            &none   &kp HOME                                                      &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                     &kp RIGHT_PARENTHESIS      &kp N7        &kp N8        &kp N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans     &kp LCTRL  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                               &kp PERCENT      &kp N4        &kp N5        &kp N6      &kp KP_PLUS            &none
               &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0     &trans  &trans  &trans              &kp COMMA      &kp N1        &kp N2        &kp N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &kp SPACE  &trans  &trans                             &kp N0        &kp N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_Symbol {
            bindings = <
 &trans           &trans        &trans      &trans      &trans                                                                                      &trans               &trans           &trans         &trans  &trans
 &trans           &trans        &trans      &trans      &trans         &trans                                                        &trans         &trans               &trans           &trans         &trans  &trans
 &trans        &kp GRAVE    &kp LS(N4)  &kp RA(N7)  &kp RA(N0)      &kp RA(E)                                                    &kp LS(N3)     &kp LS(N6)  &kp LS(NON_US_HASH)  &kp NON_US_HASH  &kp LS(GRAVE)  &trans
 &trans  &kp NON_US_BSLH  &kp LS(NUBS)  &kp LS(N8)  &kp LS(N9)     &kp LS(N7)                                                  &kp RA(RBKT)     &kp LS(N1)           &kp LS(N2)     &kp LS(RBKT)     &kp LS(N0)  &trans
 &trans     &kp RA(NUBS)    &kp LS(N5)  &kp RA(N8)  &kp RA(N9)  &kp RA(MINUS)  &trans  &trans  &trans  &trans  &trans  &trans     &kp EQUAL  &kp LS(MINUS)        &kp LS(EQUAL)         &kp RBKT      &kp RA(Q)  &trans
 &trans           &trans        &trans      &trans      &trans                 &trans  &trans  &trans  &trans  &trans  &trans                       &trans               &trans           &trans         &trans  &trans
            >;
        };

        layer_Game {
            bindings = <
         &kp ESC    &kp F2   &kp F3    &kp F4     &kp F5                                                                               &kp F6     &kp F7     &kp F8    &kp F9    &kp F10
       &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                               &kp N6  &kp N7     &kp N8     &kp N9    &kp N0      &to 0
           &kp P     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                &kp Y   &kp U      &kp I      &kp O     &kp P   &kp LBKT
           &kp L     &kp A    &kp S     &kp D      &kp F   &kp G                                                                &kp H   &kp J      &kp K      &kp L  &kp SEMI    &kp SQT
 &kp NON_US_BSLH     &kp Z    &kp X     &kp C      &kp V   &kp B     &kp N7   &kp N8  &kp LALT  &kp RGUI  &kp RALT  &kp RCTRL   &kp N   &kp M  &kp COMMA    &kp DOT  &kp FSLH  &kp PG_UP
           &kp H  &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp SPACE  &kp DEL    &kp N6   &kp F12   &kp RET   &kp BSPC          &kp UP   &kp DOWN  &kp MINUS     &none  &kp PG_DN
            >;
        };

    };
};
